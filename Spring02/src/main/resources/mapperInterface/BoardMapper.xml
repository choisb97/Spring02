<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  						"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  						
<mapper namespace="mapperInterface.BoardMapper">

<!-- ** 반복문 : Board Check list ***************** 
	=> ver01
		<foreach .......Test
	=> select * from board where id in ('admin', 'teacher', 'banana')
	   order by root desc, step asc
	
	=> ver02 SearchCriteria, PageMaker 적용
	   limit #{sno}, #{rowsPerPage} 추가 함
	   
	** FIND_IN_SET
	=> FIND_IN_SET('value', 컬럼명) : 컬럼에 'value'가 있으면 선택
	=> 배열 Type Data에 유용하게 적용 가능 (예 : category = 'sports, action, comic')
	=> 반복문에 FINd_IN_SET 적용하기
	
	 
-->


<!-- ** Mapper 기본 문법 **
	1) #{id} : parameter로 전달된 vo의 id라는 컬럼의 value가 전달 됨.
				-> getId()로 처리 함.
	2) ${id} : id라는 필드 표현.
	
	3) CDATA : XML에서는 <, > 등 비교연산자의 경우 XML 규칙상 에러 발생하기 때문에
	           이 기호를 연산자로 인식하도록 하기 위해서는 SQL문을 CDATA로 묶어주어야 한다.
	           ex) -> <![CDATA[SELECT * FROM table WHERE id > 1 ]]>
	           
	4) 조건문, 반복문, include, selectKey 등       
-->

	<!-- ***** 반복문 : Board Check List ****************************************** 
		=> <foreach ....... Test
		=> select * from board where id in ('admin', 'snowman', 'ggumsb', 'brownie', 'CHOI') order by root desc, step asc -->
	
	<!-- <select id="checkList" resultType="vo.BoardVO">
		select * from board 
		where id in 
		<foreach collection="check" item="it" open="(" close=")" separator=",">
			#{it}
		</foreach>
		order by root desc, step asc
	</select> --> <!-- 페이징 없이 checkList만! -->

	<select id="checkList" resultType="vo.BoardVO">
		select * from board
		<if test="check!=null">
			where id in
			<foreach collection="check" item="it" open="(" close=")" separator=",">
				#{it}
			</foreach>
		</if>
		order by root desc, step asc
		limit #{sno}, #{rowsPerPage}
	</select>
	
	<select id="checkCount" resultType="int">
		select count(*) from board
		<if test="check != null">
			where id in
			<foreach collection="check" item="it" open="(" close=")" separator=",">
				#{it}
			</foreach>
		</if>
	</select>
	
<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->

	<!-- SearchCriteria Page List - ver02
	`		=> SQL : 필요한 SQL구문을 만들어 놓고 필요한 경우 사용 가능.
			=> 호출 Tag : include 적용
			              'and 나머지 조건)'
						  where (seq > 0 and 나머지 조건) -->
						 
	<!-- * 조건문 : searchType : title, keyword : Java
			where title like '%' + #{keyword} + '%'
			매번 문자열 (+) 연산(Concate..함수 사용해야 함)하기에는 불편
			그래서 이 값을 변수로 처리 -> Bind(바인드) Tag -->
	<sql id="search">
		<if test="keyword != null">
			<bind name="keyVal" value="'%' + keyword + '%'"/>
		<!-- <bind name="keyVal" value="'%' + #{keyword} + '%'"/> -->
		</if>
		
		<choose>
			<when test="searchType == 'n'.toString()">
				and title like #{keyVal}
				or content like #{keyVal}
				or id like #{keyVal} )
			</when>
          
			<when test="searchType == 't'.toString()">
				and title like #{keyVal})
			</when>
			
			<when test="searchType == 'c'.toString()">
				and content like #{keyVal})
			</when>
			
			<when test="searchType == 'i'.toString()">
				and id like #{keyVal})
			</when>
			
			<when test="searchType == 'r'.toString()">
				and regdate like #{keyVal})
			</when>
			
			<when test="searchType == 'tc'.toString()">
				and title like #{keyVal}
				or content like #{keyVal})
			</when>
			
			<when test="searchType == 'tci'.toString()">
				and title like #{keyVal}
				or content like #{keyVal}
				or id like #{keyVal})
			</when>
			
			<otherwise>
				)
			</otherwise>
		</choose>
	</sql>
	
	<select id="searchList" resultType="vo.BoardVO">
		select seq, id, title, regdate, cnt, root, step, indent 
		from board
		where (seq > 0 <include refid="search"></include>
		order by root desc, step asc
		limit #{sno}, #{rowsPerPage}
	</select>
	
	<select id="searchCount" resultType="int">
		select count(*) from board
		where (seq > 0 <include refid="search"></include>
	</select>

	<!-- Criteria Page List - ver01
			=> MySQL : limit 적용
			limit a, b => a 제외하고 a+1부터 b개 -->
	<select id="criList" resultType="vo.BoardVO">
		select seq, id, title, regdate, cnt, root, step, indent 
		from board
		order by root desc, step asc
		limit #{sno}, #{rowsPerPage} <!-- cri 안에서 sno, rowsPerPage를 꺼낸다 -->
	</select>
	
	<!-- Total Rows 개수 Count -->
	<select id="criTotalCount" resultType="int"> <!-- Total Count 한 개만 출력하기 때문에 resultType= int 사용 -->
		select count(*) from board
	</select>
	
	<!-- 
		** Date Type에 출력포맷 지정하기
		=> Oracle
		   ~ , id, DATE_FORMAT(regdate, '%Y-%m-%d %H:%i:%s') regdate, ~~
		   ~ , id, DATE_FORMAT(regdate, '%Y년 %m월 %d일 %H시 %i분 %s초') regdate, ~~
	 -->
	
	<select id="selectList" resultType="vo.BoardVO"> <!-- resultType => List의 type / package명 꼭 넣어주기 -->
		select seq, id, title, 
		DATE_FORMAT(regdate, '%Y-%m-%d %H:%i:%s') regdate, cnt, root, step, indent 
		from board 
		order by root desc, step asc
	</select>
	
	
	<select id="selectOne" resultType="vo.BoardVO">
		select * from board 
		where seq = #{seq}
	</select>
	
	
	<!-- ** selectKey Test
		=> AutoNumbering을 편리하게 할 수 있도록 지원
		=> DB작업 중 먼저 어떤 키의 값을 가져와서 증가시켜서 입력하거나, 
		   혹은 입력 후에 증가된 키값을 가져올 필요가 있을때 마다.
  		   selectKey Tag를 이용하면 별도의 쿼리로직 없이 해당 메소드에서 일괄처리할 수가 있음.
  		   
  		   - keyProperty : selectKey구문의 결과가 세팅될 대상을 지정
            		     ( 즉, 매개변수로 전달된 vo의 컬럼 중 결과가 세팅될 컬럼 선택 )    
            		      
  		   - resultType : 결과의 타입.
  		   
 		   - order : BEFORE 또는 AFTER
        		     BEFORE로 설정하면 키를 먼저 조회하고 그 값을 keyProperty에 세팅한 뒤 insert 구문실행.
              		 AFTER로 설정하면 insert 구문을 실행한 뒤 selectKey 구문 실행.
         		     오라클에서는 insert구문 내부에서 일관된 호출형태로 처리한다.
         		     
   		   - statementType : STATEMENT, PREPARED 또는 CALLABLE 중 하나 선택가능.
           			마이바티스에게 Statement, PreparedStatement 또는 CallableStatement를 사용하게 한다.
           			디폴트는 PREPARED.
	 -->


	<!-- ** insert, update, delete는 return type이 int로 정해져있기 때문에 resultType 없어도 됨 -->
	<!-- ** 원글 입력 -->
	<insert id="insert">
		<!-- * Old insert SQL
        insert into board (seq, id, title, content, root) 
		values((select * from (select IFNULL(max(seq), 0) + 1 from board) as temp)
		, #{id}, #{title}, #{content}
		, (select * from (select IFNULL(max(seq), 0) + 1 from board) as temp)) -->
	
		<selectKey keyProperty="seq" resultType="int" order="BEFORE">
			select IFNULL(max(seq), 0) + 1 from board
		</selectKey>
		insert into board (seq, id, title, content, root) 
		values(#{seq}, #{id}, #{title}, #{content}, #{seq})
	</insert>


	<update id="update">
		update board set title = #{title}, content = #{content} 
		where seq = #{seq}
	</update>
	
	
	<!-- if 조건문 -->
	<delete id="delete">
		delete from board
		<!-- 원글 삭제 : 동일 root는 모두 삭제 -->
		<if test="seq == root">where root = #{seq}</if>
		
		<!-- 답글 하나만 삭제 -->
		<if test="seq != root">where seq = #{seq}</if>
	</delete>
	
	
	<!-- ** 조회수 증가 -->
	<update id="countUp"> 
		update board set cnt = cnt + 1 
		where seq = #{seq}
	</update>
	
	
	<!-- ** Reply Insert -->
	<insert id="rinsert">
		<!-- * Old SQL * 
		insert into board(seq, id, title, content, root, step, indent) 
		values((select * from (select IFNULL(max(seq), 0) + 1 from board) as temp)
		, #{id}, #{title}, #{content}, #{root}, #{step}, #{indent}) -->
	
		<selectKey keyProperty="seq" resultType="int" order="BEFORE">
			select IFNULL(max(seq), 0) + 1 from board
		</selectKey>
		insert into board(seq, id, title, content, root, step, indent) 
		values(#{seq}, #{id}, #{title}, #{content}, #{root}, #{step}, #{indent})
	</insert>
	
	<!-- BoardServiceImpl에서 if문 처리 -->
	<update id="stepUpdate">
		<!-- * Old SQL *
		update board set step = step + 1 
		where root = #{root} and step >= #{step} 
		and seq != (select * from (select max(seq) from board) as temp) -->
		
		<selectKey keyProperty="seq" resultType="int" order="BEFORE">
			select max(seq) from board
		</selectKey>
		update board set step = step + 1 
		where root = #{root} and step >= #{step} 
		and seq != #{seq}
	</update>

</mapper>