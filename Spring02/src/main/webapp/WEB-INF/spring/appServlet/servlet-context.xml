<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd
		http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring-1.2.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
<!-- ** NameSpaces 안 뜰 때 **
		=> 강제로 xmlns: 값을 넣어줄 수 있다. (ex -> xmlns:mybatis-spring="http://myba... 
		=> 단, 이 때는 xsi:schemaLocation=...에도 해당하는 url 값을 추가 해야한다. -->

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<context:component-scan base-package="com.ncs.green, service, util" />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<!-- *** jsonView 설정 
	=> 1) BeanNameViewResolver
	=> 2) jsonView 설정 -->
   <beans:bean id="viewResolver" 
         class="org.springframework.web.servlet.view.BeanNameViewResolver">
      <beans:property name="order" value="1" />
   </beans:bean>
   
   <beans:bean id="jsonView" class="net.sf.json.spring.web.servlet.view.JsonView" /> 
   
   <!-- ** Image DownLoad 
       => 다운로드를 처리할 ViewResolver 클래스 등록  ( Java Code 작성 )
         => id="downloadView"와 컨트롤러의 매핑메서드에서 리턴된 view name과 같아야 한다. -->    
   <beans:bean id="downloadView" class="downTest.DownloadView" />
   

<!-- ** BeanNameViewResolver
   => id에 해당하는 Bean이 View를 처리하도록 해주는 ViewResolver 
      컨트롤러에서  mv.setViewName("downloadView") 하게되면  
      일반적인 경우 InternalResourceViewResolver에 의해  views/downloadView.jsp를 찾음,
      그러나 jsp가 아닌 형태의 response를 처리하는 경우에는 "downloadView"와 동일한 id로 생성된 Bean을 찾아 response를 처리 함
   => 그래서 ViewResolver들 간의 우선순위가 팔요함 ( 아래  property order 참고 ) 
   => 사용 예 : "jsonView", ImageDownLoad의 "downloadView" 

   ** property order 
    => 두 개 이상 존재하는 viewResolver를 위해서 우선순위를 매기는 것.
            우선순위를 명시하지 않으면 "가장 낮은 우선순위를 갖게 된다."
            우선순위는 "0"이 가장 먼저 실행되고, 이후로 매겨지는 순서에 따라 실행된다.
    => 그 다음 viewResolver의 실행 기준은 "null"이 반환되느냐이다. 
            그래서 null 값이 있을 수 없는 InternalResourceViewResolver가 우선순위가 높게 되면,
            다른 viewResolver는 사용되지 않기 때문에 (항상 뷰 이름에 매핑되는 뷰 객체를 리턴하기 때문)
       InternalResourceViewResolver는 우선순위가 가장 낮아야 한다. 
-->

	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		** Image Upload : MultipartResolver 설정 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="-1" />
	</beans:bean>
	
	<!-- 
		=> id, name 변경 불가능
		   : 대부분의 Resolver로 끝나는 클래스의 경우에는 이미 정해져있기 때문에 변경 불가능.
		=> maxUploadSize는 지정하지 않으면 default 값은 -1이며, 크기 무제한이 됨.
		   다양하게 변경하며 Test 
	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	
	<!-- ******** WebSocket 설정 ******************************************************* 
		** echoHandler & chatHandler 설정
		1) echoHandler와 클라이언트 요청 매핑
		2) echoHandler Bean 등록 
		** JUnit Spring Mybatis Test 할 때는 주석처리 해야 함 -->
	 <websocket:handlers>
        <websocket:mapping handler="echoHandler" path="ws_echo"/>
        <websocket:mapping handler="chatHandler" path="ws_chat"/>
     </websocket:handlers>
	
	<beans:bean id="echoHandler" class="socketTest.EchoHandler" />
	<beans:bean id="chatHandler" class="socketTest.ChatHandler" />
	
	
	<!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<!-- ********** Mybatis 설정 : interface 방식 *******************************************
			  		=> DAO에서의 sql 구문을 xml(Mapper)로 처리
			  		=> DB_Connection, Mybatis 설정
	 -->
	<!-- 1) DB_Connection 
			=> allowPublicKeyRetrieval=true : local DB open하지 않아도 connection 허용
	-->
<!--<beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	 	<beans:property name="driverClassName" value="com.mysql.cj.jdbc.Driver" />
	 	<beans:property name="url" value="jdbc:mysql://localhost:3306/mydb?useSSL=false&amp;serverTimezone=UTC&amp;allowPublicKeyRetrieval=true"/>
	 	<beans:property name="username" value="root" />
	 	<beans:property name="password" value="choi0517" />
	 </beans:bean>-->
	 
	 <!-- 2) Mybatis 설정 
	 		=> SqlSessionFatory
	 		  - MyBatis와 연동시 DB 연결과 SQL 실행의 핵심 클래스
              - SqlSessionFactoryBean에 의해 생성됨  
            => base-package 등록 : DAO 필요 없이 interface ~ Mapper.java 사용을 위한 경로 맞춰주는 설정
	 -->
<!--<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	 	<beans:property name="dataSource" ref="dataSource" />--> 
	 	<!-- 참조는 DB_Connection의 id -->
   <!-- <beans:property name="mapperLocations" value="classpath:/mappers/**/*Mapper.xml" /> 
	 	 	- src/main/resources 안에 있음
	 	 => interface 방식으로 적용하면 필요 없음. -->
	 <!--<mybatis-spring:scan base-package="mapperInterface"/>
	 </beans:bean>-->
	 
<!--  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	** 인터셉터 설정 
	1) 인터셉터 클래스 빈등록  -->
	<beans:bean id="loginInterceptor" class="com.ncs.green.LoginInterceptor"/>
<!-- 
	2) url과 인터셉터 설정 
	=> Namespaces에서 mvc 확인 ,
	=> mvc 사용하면 위에 있는 다음 2 Tag 수정 필요함
	   <mvc:annotation-driven,  <mvc:resources
 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 전체경로 지정 후 예외경로 지정  
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/"/>
			<mvc:exclude-mapping path="/home"/>
			<mvc:exclude-mapping path="/loginf"/>
			<mvc:exclude-mapping path="/login"/>
			<mvc:exclude-mapping path="/joinf"/>
			<mvc:exclude-mapping path="/join"/>
			<mvc:exclude-mapping path="/idDupCheck"/>
			<mvc:exclude-mapping path="/*check*"/>
			<mvc:exclude-mapping path="/b*"/> -->
			
			<mvc:mapping path="/green*" />
			<!-- 인터셉터로 사용할 빈 등록 -->
			<beans:ref bean="loginInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	
<!-- ** Exception Resolver 설정 ***************************************** -->
	<beans:bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<!-- property Tag는 setter 주입을 의미
			-> setExceptionMappings(...) : 매개변수 Type이 Collection Properties
			-> setDefaultErrorView(...) : 매개변수 Type이 String -->
		<beans:property name="exceptionMappings">
			<beans:props>
				<beans:prop key="org.springframework.dao.DuplicateKeyException">
					errorPage/dupExceptionMessage
				</beans:prop>
				
				<beans:prop key="org.springframework.jdbc.UncategorizedSQLException">
					errorPage/sqlExceptionMessage
				</beans:prop>
				
				<beans:prop key="java.lang.IllegalArgumentException">
					errorPage/ilExceptionMessage
				</beans:prop>
				
				<beans:prop key="java.lang.ArithmeticException">
					errorPage/arExceptionMessage
				</beans:prop>
				
				<beans:prop key="java.lang.NullPointerException">
					errorPage/npExceptionMessage
				</beans:prop>
			</beans:props>
		</beans:property>
		
		<beans:property name="defaultErrorView" value="errorPage/exception_500" />
			
	</beans:bean>
	
	<!-- 1. 트랜잭션 관리자 클래스 등록  :
   => PlattformTransactionManager 인터페이스를 구현한 클래스 들
   => DataSourceTransactionManager : JDBC, Mybatis 모두 지원 
   => commit, rollback 지원  
   
   *** MyBatis-Spring Transaction 처리 
   => MyBatis 프레임워크는 Spring 프레임워크에서 MyBatis를 통합하여 사용할 수 있게
      MyBatis-Spring를 제공한다.
   => MyBatis-Spring를 통해 만들어진 SqlSessionTemplate 객체는 
      commit(), rollback() 메소드를 사용할 수 없다.
   => 즉 SqlSessionTemplate 객체를 이용하여 프로그램적으로는 트랜잭션을 관리할수 없다. 
      그러므로 DataSourceTransactionManager 클래스를 제공하며, 이를 이용 xml로 처리함.
   -->
	<beans:bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>

	<!-- 2. Transaction 관리 Advice 설정 => 스프링 컨테이너가 <tx:advice> 설정을 참조하여 자동으로 
		생성 => 어드바이스 txAdvice는 앞서 설정한 txManeger를 이용하여 트랜잭션을 관리 자식 엘리먼트인 <tx:method> 
		이용하여 트랜잭션 적용메서드를 지정함 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="sel*" read-only="true" />
			<tx:method name="*" rollback-for="Exception" />
			<!-- 'sel' 로 시작되는 모든 메서드는 read_only로 처리되어 트랜잭션 관리 대상에서 제외되며 나머지는 관리대상이 
				됨 -->
		</tx:attributes>
	</tx:advice>

	<!-- 3. Transaction AOP 설정 -->
	<aop:config>
		<aop:pointcut
			expression="execution(* com.ncs.green.*.join(..))" id="myPointcut" />
		<aop:advisor advice-ref="txAdvice"
			pointcut-ref="myPointcut" />
	</aop:config>   
	 
</beans:beans>